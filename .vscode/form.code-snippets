{
  "create setting form": {
    "prefix": "createSettingForm",
    "body": [
      "'use client';",
      "",
      "import { FormChangePublisher } from '@/components/react-hook-form/change-publisher';",
      "import { FormDevTool } from '@/components/react-hook-form/devtool';",
      "import { ControlledForm } from '@/components/react-hook-form/ui/form';",
      "import { addToast } from '@heroui/react';",
      "import { zodResolver } from '@hookform/resolvers/zod';",
      "import type { APIGuildChannel, APIRole, GuildChannelType } from 'discord-api-types/v10';",
      "import { useParams } from 'next/navigation';",
      "import { createContext } from 'react';",
      "import { type SubmitHandler, useForm } from 'react-hook-form';",
      "import type { z } from 'zod';",
      "",
      "type InputSetting = z.input<typeof $1>;",
      "type OutputSetting = z.output<typeof $1>;",
      "",
      "type Props = {",
      "  channels: APIGuildChannel<GuildChannelType>[];",
      "  roles: APIRole[];",
      "  setting: OutputSetting | null;",
      "};",
      "",
      "const PropsContext = createContext<Omit<Props, 'setting'>>({",
      "  channels: [],",
      "  roles: [],",
      "});",
      "",
      "export function SettingForm({ setting, ...props }: Props) {",
      "  const { guildId } = useParams<{ guildId: string }>();",
      "",
      "  const form = useForm<InputSetting, unknown, OutputSetting>({",
      "    resolver: zodResolver($1),",
      "    defaultValues: {",
      "      ...setting,",
      "    },",
      "  });",
      "",
      "  const onSubmit: SubmitHandler<OutputSetting> = async (values) => {",
      "     const { error } = await internalFetch(`/guilds/\\${guildId}/$2`, {",
      "       method: 'POST',",
      "       body: JSON.stringify(values),",
      "       headers: {",
      "         'content-type': 'application/json',",
      "       },",
      "     });",
      "",
      "     if (!error) form.reset(form.getValues());",
      "     else",
      "       addToast({",
      "         title: '送信中に問題が発生しました',",
      "         description: '時間を置いてもう一度送信してください。',",
      "         color: 'danger',",
      "       });",
      "  };",
      "",
      "  return (",
      "    <PropsContext value={props}>",
      "      <ControlledForm form={form} onSubmit={form.handleSubmit(onSubmit)}>",
      "        <FormChangePublisher/>",
      "        <FormDevTool />",
      "      </ControlledForm>",
      "    </PropsContext>",
      "  );",
      "}"
    ],
    "description": "Create a setting form component"
  }
}
