{
  "create setting form": {
    "prefix": "create_setting_form",
    "body": [
      "'use client';",
      "",
      "import { FormChangePublisher } from '@/components/react-hook-form/change-publisher';",
      "import { FormDevTool } from '@/components/react-hook-form/devtool';",
      "import { ControlledForm } from '@/components/react-hook-form/ui/form';",
      "import { postInternalAPI } from '@/lib/api/fetcher';",
      "import { addToast } from '@heroui/react';",
      "import { zodResolver } from '@hookform/resolvers/zod';",
      "import type { APIGuildChannel, APIRole, GuildChannelType } from 'discord-api-types/v10';",
      "import { useParams } from 'next/navigation';",
      "import { createContext } from 'react';",
      "import { type SubmitHandler, useForm } from 'react-hook-form';",
      "import type { z } from 'zod';",
      "",
      "type InputSetting = z.input<typeof $1>;",
      "type OutputSetting = z.output<typeof $1>;",
      "",
      "type Props = {",
      "  channels: APIGuildChannel<GuildChannelType>[];",
      "  roles: APIRole[];",
      "  setting: OutputSetting | null;",
      "};",
      "",
      "const PropsContext = createContext<Omit<Props, 'setting'>>({",
      "  channels: [],",
      "  roles: [],",
      "});",
      "",
      "export function SettingForm({ setting, ...props }: Props) {",
      "  const { guildId } = useParams<{ guildId: string }>();",
      "",
      "  const form = useForm<InputSetting, unknown, OutputSetting>({",
      "    resolver: zodResolver($1),",
      "    defaultValues: {",
      "      ...setting,",
      "    },",
      "  });",
      "",
      "  const onSubmit: SubmitHandler<OutputSetting> = async (values) => {",
      "    const res = await $2({ guildId, ...values });",
      "    const error = !res?.data?.success;",
      "",
      "    if (error) {",
      "      return addToast({",
      "        title: '送信中に問題が発生しました',",
      "        description: '時間を置いてもう一度送信してください。',",
      "        color: 'danger',",
      "      });",
      "    }",
      "    form.reset(form.getValues());",
      "  };",
      "",
      "  return (",
      "    <PropsContext value={props}>",
      "      <ControlledForm form={form} onSubmit={form.handleSubmit(onSubmit)}>",
      "        <FormChangePublisher/>",
      "        <FormDevTool />",
      "      </ControlledForm>",
      "    </PropsContext>",
      "  );",
      "}"
    ],
  },
  "create setting page": {
    "prefix": "create_setting_page",
    "body": [
      "import { Header } from '@/components/header';",
      "import { requireDashboardAccessPermission } from '@/lib/permission';",
      "import { getChannels, getRoles } from '@/lib/discord/api';",
      "import { sortChannels, sortRoles } from '@/lib/discord/utils';",
      "import { db } from '@/lib/drizzle';",
      "import type { Metadata } from 'next';",
      "import type { SettingPageProps } from '../types';",
      "import { SettingForm } from './form';",
      "",
      "export const metadata: Metadata = {",
      "  title: '$1',",
      "};",
      "",
      "export default async function ({ params }: SettingPageProps) {",
      "  const { guildId } = await params;",
      "  await requireDashboardAccessPermission(guildId);",
      "",
      "  const [{ data: channels, error: channelsError }, { data: roles, error: rolesError }, setting] =",
      "    await Promise.all([",
      "      getChannels(guildId),",
      "      getRoles(guildId),",
      "      db.query.$2.findFirst({",
      "        where: (setting, { eq }) => eq(setting.guildId, guildId),",
      "      }),",
      "    ]);",
      "",
      "  if (channelsError || rolesError) {",
      "    throw new Error('Failed to load data');",
      "  }",
      "",
      "  return (",
      "    <>",
      "      <Header",
      "        title='$3'",
      "        description='$4'",
      "      />",
      "      <SettingForm",
      "        channels={sortChannels(channels)}",
      "        roles={sortRoles(roles)}",
      "        setting={$5.safeParse(setting).data ?? null}",
      "      />",
      "    </>",
      "  );",
      "}"
    ],
  }
}
