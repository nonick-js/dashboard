{
  "create setting form": {
    "prefix": "create_setting_form",
    "body": [
      "'use client';",
      "",
      "import { FormChangePublisher } from '@/components/react-hook-form/change-publisher';",
      "import { FormDevTool } from '@/components/react-hook-form/devtool';",
      "import { ControlledForm } from '@/components/react-hook-form/ui/form';",
      "import { addToast } from '@heroui/react';",
      "import { zodResolver } from '@hookform/resolvers/zod';",
      "import type { APIGuildChannel, APIRole, GuildChannelType } from 'discord-api-types/v10';",
      "import { useParams } from 'next/navigation';",
      "import { createContext } from 'react';",
      "import { type SubmitHandler, useForm } from 'react-hook-form';",
      "import type { z } from 'zod';",
      "",
      "type InputSetting = z.input<typeof $1>;",
      "type OutputSetting = z.output<typeof $1>;",
      "",
      "type Props = {",
      "  channels: APIGuildChannel<GuildChannelType>[];",
      "  roles: APIRole[];",
      "  setting: OutputSetting | null;",
      "};",
      "",
      "const PropsContext = createContext<Omit<Props, 'setting'>>({",
      "  channels: [],",
      "  roles: [],",
      "});",
      "",
      "export function SettingForm({ setting, ...props }: Props) {",
      "  const { guildId } = useParams<{ guildId: string }>();",
      "",
      "  const form = useForm<InputSetting, unknown, OutputSetting>({",
      "    resolver: zodResolver($1),",
      "    defaultValues: {",
      "      ...setting,",
      "    },",
      "  });",
      "",
      "  const onSubmit: SubmitHandler<OutputSetting> = async (values) => {",
      "    const res = await $2({ guildId, ...values });",
      "    const error = !res?.data?.success;",
      "",
      "    if (error) {",
      "      return addToast({",
      "        title: '送信中に問題が発生しました',",
      "        description: '時間を置いてもう一度送信してください。',",
      "        color: 'danger',",
      "      });",
      "    }",
      "    form.reset(form.getValues());",
      "  };",
      "",
      "  return (",
      "    <PropsContext value={props}>",
      "      <ControlledForm form={form} onSubmit={form.handleSubmit(onSubmit)}>",
      "        <FormChangePublisher/>",
      "        <FormDevTool />",
      "      </ControlledForm>",
      "    </PropsContext>",
      "  );",
      "}"
    ]
  },
  "create eventlog setting form": {
    "prefix": "create_eventlog_setting_form",
    "body": [
      "'use client';",
      "",
      "import { FormChangePublisher } from '@/components/react-hook-form/change-publisher';",
      "import { ChannelSelect } from '@/components/react-hook-form/channel-select';",
      "import { FormDevTool } from '@/components/react-hook-form/devtool';",
      "import { ControlledForm } from '@/components/react-hook-form/ui/form';",
      "import { ControlledSwitch } from '@/components/react-hook-form/ui/switch';",
      "import { addToast } from '@heroui/react';",
      "import { zodResolver } from '@hookform/resolvers/zod';",
      "import { ChannelType } from 'discord-api-types/v10';",
      "import { useParams } from 'next/navigation';",
      "import { useContext } from 'react';",
      "import { type SubmitHandler, useForm, useFormContext, useWatch } from 'react-hook-form';",
      "import type { z } from 'zod';",
      "import { PropsContext } from '../form-container';",
      "",
      "type InputSetting = z.input<typeof $1.form>;",
      "type OutputSetting = z.output<typeof $1.form>;",
      "",
      "type Props = {",
      "  setting: OutputSetting | null;",
      "};",
      "",
      "export function $2LogSettingForm({ setting }: Props) {",
      "  const { guildId } = useParams<{ guildId: string }>();",
      "",
      "  const form = useForm<InputSetting, unknown, OutputSetting>({",
      "    resolver: zodResolver($1.form),",
      "    defaultValues: {",
      "      enabled: setting?.enabled ?? false,",
      "      channel: setting?.channel ?? null,",
      "    },",
      "  });",
      "",
      "  const onSubmit: SubmitHandler<OutputSetting> = async (values) => {",
      "    const res = await $3({ guildId, ...values });",
      "    const error = !res?.data?.success;",
      "",
      "    if (error) {",
      "      return addToast({",
      "        title: '送信中に問題が発生しました',",
      "        description: '時間を置いてもう一度送信してください。',",
      "        color: 'danger',",
      "      });",
      "    }",
      "    form.reset(form.getValues());",
      "  };",
      "",
      "  return (",
      "    <ControlledForm form={form} onSubmit={form.handleSubmit(onSubmit)} className='pb-0'>",
      "      <GeneralSetting />",
      "      <FormChangePublisher />",
      "      <FormDevTool />",
      "    </ControlledForm>",
      "  );",
      "}",
      "",
      "function GeneralSetting() {",
      "  const { channels } = useContext(PropsContext);",
      "  const { control } = useFormContext<InputSetting>();",
      "",
      "  const enabled = useWatch<InputSetting>({ name: 'enabled' });",
      "",
      "  return (",
      "    <div className='w-full flex flex-col gap-8'>",
      "      <ControlledSwitch",
      "        control={control}",
      "        name='enabled'",
      "        label='$4を有効にする'",
      "        description='$5'",
      "      />",
      "      <ChannelSelect",
      "        control={control}",
      "        name='channel'",
      "        channels={channels}",
      "        channelTypeFilter={{ include: [ChannelType.GuildText] }}",
      "        label='ログを送信するチャンネル'",
      "        isRequired",
      "        isDisabled={!enabled}",
      "      />",
      "    </div>",
      "  );",
      "}"
    ]
  },
  "create setting page": {
    "prefix": "create_setting_page",
    "body": [
      "import { Header } from '@/components/header';",
      "import { requireDashboardAccessPermission } from '@/lib/permission';",
      "import { getChannels, getRoles } from '@/lib/discord/api';",
      "import { sortChannels, sortRoles } from '@/lib/discord/utils';",
      "import { db } from '@/lib/drizzle';",
      "import type { Metadata } from 'next';",
      "import type { SettingPageProps } from '../../types';",
      "import { SettingForm } from './form';",
      "",
      "export const metadata: Metadata = {",
      "  title: '$1',",
      "};",
      "",
      "export default async function ({ params }: SettingPageProps) {",
      "  const { guildId } = await params;",
      "  await requireDashboardAccessPermission(guildId);",
      "",
      "  const [channels, roles, setting] =",
      "    await Promise.all([",
      "      getChannels(guildId),",
      "      getRoles(guildId),",
      "      db.query.$2.findFirst({",
      "        where: (setting, { eq }) => eq(setting.guildId, guildId),",
      "      }),",
      "    ]);",
      "",
      "  return (",
      "    <>",
      "      <Header",
      "        title='$3'",
      "        description='$4'",
      "      />",
      "      <SettingForm",
      "        channels={sortChannels(channels)}",
      "        roles={sortRoles(roles)}",
      "        setting={$5.safeParse(setting).data ?? null}",
      "      />",
      "    </>",
      "  );",
      "}"
    ]
  },
  "create setting action": {
    "prefix": "create_setting_action",
    "body": [
      "'use server';",
      "",
      "import { auditLog } from '@/lib/database/src/schema/audit-log';",
      "import { db } from '@/lib/drizzle';",
      "import { guildActionClient } from '@/lib/safe-action/client';",
      "",
      "export const updateSettingAction = guildActionClient",
      "  .inputSchema($1)",
      "  .action(async ({ parsedInput, bindArgsParsedInputs, ctx }) => {",
      "    try {",
      "      if (!ctx.session) throw new Error('Unauthorized');",
      "      const guildId = bindArgsParsedInputs[0];",
      "",
      "      const oldValue = await db.query.$2.findFirst({",
      "        where: (setting, { eq }) => eq(setting.guildId, guildId),",
      "      });",
      "",
      "      const [newValue] = await db",
      "        .insert($3)",
      "        .values({ guildId, ...parsedInput })",
      "        .onConflictDoUpdate({ target: $3.guildId, set: parsedInput })",
      "        .returning();",
      "",
      "      await db.insert(auditLog).values({",
      "        guildId: guildId,",
      "        authorId: ctx.session.user.id,",
      "        targetName: '$4',",
      "        actionType: 'update_guild_setting',",
      "        oldValue,",
      "        newValue,",
      "      });",
      "      return { success: true };",
      "    } catch {",
      "      return { success: false };",
      "    }",
      "  });"
    ]
  }
}
